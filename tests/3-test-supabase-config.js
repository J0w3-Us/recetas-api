// tests/3-test-supabase-config.js
// Verifica la configuraci√≥n de Supabase y qu√© repositorio est√° usando la app

require('dotenv').config({ path: '../src/.env' });

console.log('üîç Test 3: Configuraci√≥n de Supabase');

function testSupabaseConfig() {
    console.log('‚è≥ Verificando variables de entorno...');

    // Verificar variables de entorno
    const envVars = {
        'DATABASE_URL': !!process.env.DATABASE_URL,
        'SUPABASE_URL': !!process.env.SUPABASE_URL,
        'SUPABASE_ANON_KEY': !!process.env.SUPABASE_ANON_KEY,
        'SUPABASE_SERVICE_ROLE_KEY': !!process.env.SUPABASE_SERVICE_ROLE_KEY
    };

    console.log('üîß Variables de entorno:');
    Object.entries(envVars).forEach(([key, exists]) => {
        console.log(`  ${key}: ${exists ? '‚úÖ Configurada' : '‚ùå No configurada'}`);
    });

    // Verificar configuraci√≥n del m√≥dulo config
    try {
        const config = require('../src/config');
        console.log('üìã Configuraci√≥n cargada:');
        console.log(`  port: ${config.port}`);
        console.log(`  baseUrl: ${config.baseUrl || 'undefined'}`);
        console.log(`  supabaseUrl: ${config.supabaseUrl || 'undefined'}`);
        console.log(`  supabaseAnonKey: ${config.supabaseAnonKey ? '‚úÖ Presente' : '‚ùå Ausente'}`);

        // Determinar qu√© repositorio usar√° la app
        const willUseSupabase = config.supabaseUrl && config.supabaseAnonKey;
        console.log('üóÑÔ∏è Repositorio que usar√° la app:', willUseSupabase ? '‚úÖ SupabaseRecetaRepository' : '‚ö†Ô∏è MemoryRecetaRepository (fallback)');

        if (!willUseSupabase) {
            console.log('‚ö†Ô∏è ADVERTENCIA: La app usar√° repositorio en memoria (no persistir√° en BD)');
            console.log('üîß Soluci√≥n: Configura SUPABASE_URL y SUPABASE_ANON_KEY en src/.env');
        }

    } catch (err) {
        console.error('‚ùå Error cargando configuraci√≥n:', err.message);
    }

    // Test de cliente Supabase
    if (envVars.SUPABASE_URL && envVars.SUPABASE_ANON_KEY) {
        try {
            console.log('‚è≥ Probando inicializaci√≥n del cliente Supabase...');
            const { supabase } = require('../src/core/db/supabase');

            if (supabase && supabase.auth) {
                console.log('‚úÖ Cliente Supabase inicializado correctamente');
                console.log(`  URL: ${supabase.supabaseUrl}`);
                console.log(`  Key: ${supabase.supabaseKey ? supabase.supabaseKey.substring(0, 20) + '...' : 'No disponible'}`);
            } else {
                console.log('‚ö†Ô∏è Cliente Supabase no inicializado correctamente');
            }

        } catch (err) {
            console.error('‚ùå Error inicializando cliente Supabase:', err.message);
        }
    }
}

testSupabaseConfig();

console.log('üéâ Test 3 completado - Revisa los resultados arriba');